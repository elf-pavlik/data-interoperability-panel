Access Receipts {#receipts}
=====================

The following operations pertain to
[Access Receipts](https://solid.github.io/data-interoperability-panel/specification/#receipts)
in the [[SAI|Solid Application Interoperability Specification]].

##  Provide Access Receipt ##  {#provide-access-receipt}

<table class="data operation" align="left">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr><th colspan=2>Description</th></tr>
  </thead>
  <tbody>
    <tr>
      <td colspan=2>

      This operation takes an input [=Access Grant=] and provides
      an [=Access Receipt=] to the grantee. In the event that
      the grantee is an [=Application=] it may provide the
      [=Access Receipt=] in the [=Application Registration=]
      for the [=Application=].            
      
      </td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Inputs</th></tr>
  </thead>
  <tbody>    
    <tr>
      <td>`GRANT`</td>
      <td>[=Access Grant=] to provide a receipt for</td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Outputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>[=Access Receipt=]</td>
      <td>that was provided for `GRANT`</td>
    </tr>
  </tbody>
</table>

<div class="opdetails">

1. Let `SUBJECT` be the [=Access Grant Subject=] linked via
    `GRANT hasAccessGrantSubject`
1. Let `AGENT` be `SUBJECT accessByAgent`
1. Let `APP` be `SUBJECT accessByApplication`
1. If `APP` is not empty
    1. If `APP receivesAccessReceipt` is `interop:ReceiptInRegistration`
        1. Let `RECEIPT` be result of [[#provide-receipt-in-registration]] with
            inputs: `GRANT`
    1. If `APP receivesAccessReceipt` is `interop:ReceiptInMessage`
        1. Let `RECEIPT` be result of [[#provide-receipt-in-message]] with
            inputs: `GRANT`
1. If `APP` is empty and `AGENT` is not empty
    1. Return error if `AGENT receivesAccessReceipt` is not
        `interop:ReceiptInMessage`
    1. Let `RECEIPT` be result of [[#provide-receipt-in-message]] with inputs: `GRANT`
1. Return `RECEIPT`

</div>

##  Provide Receipt in Application Registration ##  {#provide-receipt-in-registration}

<table class="data operation" align="left">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr><th colspan=2>Description</th></tr>
  </thead>
  <tbody>
    <tr>
      <td colspan=2>

      This operation provides an [=Access Receipt=] for an [=Access Grant=]
      in the [=Application Registration=] of the [=Application=] in
      the [=Access Grant Subject=].            
      
      </td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Inputs</th></tr>
  </thead>
  <tbody>    
    <tr>
      <td>`GRANT`</td>
      <td>[=Access Grant=] to provide a receipt for</td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Outputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>[=Access Receipt=]</td>
      <td>for `GRANT` stored in an [=Application Registration=]</td>
    </tr>
  </tbody>
</table>

<div class="opdetails">

1. Let `RECEIPT` be an empty [=Access Receipt=]
1. Let `SUBJECT` be the [=Access Grant Subject=] linked via
    `GRANT hasAccessGrantSubject`
1. Let `GRANTOR` be the current [=Social Agent=]
1. Let `OWNER` be the [=Social Agent=] owner of the storage access is being granted from 
1. Let `APP` be `SUBJECT accessByApplication`
1. Let `RECEIPT fromAgent` be `OWNER`
1. Let `RECEIPT viaAgent` be `GRANTOR`
1. Let `RECEIPT providedAt` be the current time
1. Let `RECEIPT hasAccessGrantSubject` be `SUBJECT`
1. Let `RECEIPT hasAccessNeedGroup` be all [=Access Need Groups=]
    linked via `GRANT hasAccessNeedGroup`
1. Let `RECEIPT hasDataGrant` be all [=Data Grants=]
    linked via `GRANT hasDataGrant`
1. Let `RECEIPT hasTrustedGrant` be all [=Trusted Grants=]
    linked via `GRANT hasTrustedGrant`
1. Let `APPREG` be result of #appreg-loadappreg with
    inputs: `OWNER`, `APP`
    1. Call #appreg-registerapp if `APPREG` is empty
1. Post `RECEIPT` to `APPREG` container
1. Let `CURRENT` be `APPREG hasAccessReceipt`
1. Remove `CURRENT` if it exists
1. Let `APPREG hasAccessReceipt` be `CURRENT`
1. Return `RECEIPT`

</div>

##  Provide Receipt in Message ##  {#provide-receipt-in-message}

<table class="data operation" align="left">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr><th colspan=2>Description</th></tr>
  </thead>
  <tbody>
    <tr>
      <td colspan=2>

      This operation provides an [=Access Receipt=] for an [=Access Grant=]
      to a given [=Agent=] by delivering it to their access inbox.
      
      </td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Inputs</th></tr>
  </thead>
  <tbody>    
    <tr>
      <td>`GRANT`</td>
      <td>[=Access Grant=] to provide a receipt for</td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Outputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>[=Access Receipt=]</td>
      <td>for `GRANT` posted to the grantee [=Social Agent's=] access inbox</td>
    </tr>
  </tbody>
</table>

<div class="opdetails">

1. Let `RECEIPT` be an empty [=Access Receipt=]
1. Let `SUBJECT` be the [=Access Grant Subject=] linked via
    `GRANT hasAccessGrantSubject`
1. Let `GRANTEE` be `SUBJECT accessByAgent`
1. Let `GRANTOR` be the current [=Social Agent=]
1. Let `OWNER` be the [=Social Agent=] owner of the storage access is being granted from 
1. Let `RECEIPT fromAgent` be `OWNER`
1. Let `RECEIPT viaAgent` be `GRANTOR`
1. Let `RECEIPT providedAt` be the current time
1. Let `RECEIPT hasAccessGrantSubject` be `SUBJECT`
1. Let `RECEIPT hasAccessNeedGroup` be all [=Access Need Groups=]
    linked via `GRANT hasAccessNeedGroup`
1. Let `RECEIPT hasDataGrant` be all [=Data Grants=]
    linked via `GRANT hasDataGrant`
1. Let `RECEIPT hasTrustedGrant` be all [=Trusted Grants=]
    linked via `GRANT hasTrustedGrant`
1. Post `RECEIPT` to `GRANTEE hasAccessInbox`
1. Return `RECEIPT`

</div>


##  Record Access Receipt ##  {#record-access-receipt}

<table class="data operation" align="left">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr><th colspan=2>Description</th></tr>
  </thead>
  <tbody>
    <tr>
      <td colspan=2>

      This operation stores a new [=Access Receipt=] in
      an [=Access Grant Registry=]
      
      </td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Inputs</th></tr>
  </thead>  
  <tbody>    
    <tr>
      <td>`RECEIPT`</td>
      <td>[=Access Receipt=] to record</td>
    </tr>
    <tr>
      <td>`REGISTRY`</td>
      <td>[=Access Receipt Registry=] to store receipts in</td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Outputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>[=Access Receipt=]</td>
      <td>Stored in `REGISTRY`</td>
    </tr>
  </tbody>
</table>

<div class="opdetails">

1. Let `CURRENT` be an [=Access Receipt=] returned by [[#load-access-receipt]] with
    inputs: `RECEIPT fromAgent`, `REGISTRY`
1. If `CURRENT` is empty
    1. Add `RECEIPT` to `REGISTRY`
    1. Link `RECEIPT` to `REGISTRY` via `REGISTRY hasRegistration`
1. If `CURRENT` is not empty
    1. Update `CURRENT` with `RECEIPT`
1. Update the Agent Registry with inputs: `RECEIPT`.
1. Return `RECEIPT`

</div>

##  Load Access Receipt ##  {#load-access-receipt}

<table class="data operation" align="left">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr><th colspan=2>Description</th></tr>
  </thead>
  <tbody>
    <tr>
      <td colspan=2>

      This operation looks up an [=Access Receipt=] in 
      an [=Access Receipt Registry=] `REGISTRY` based on the
      [=Agent=] owner of the data that was shared.
      
      </td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Inputs</th></tr>
  </thead>
  <tbody>    
    <tr>
      <td>`AGENT`</td>
      <td>[=Social Agent=] owner of the shared data</td>
    </tr>
    <tr>
      <td>`REGISTRY`</td>
      <td>[=Access Receipt Registry=] to lookup</td>
    </tr>
  </tbody>
  <thead>
    <tr><th colspan=2>Outputs</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>[=Access Receipt=]</td>
      <td>Corresponding to `AGENT` in `REGISTRY`</td>
    </tr>
  </tbody>
</table>

<div class="opdetails">

1. For each [=Access Receipt=] `RECEIPT` included in `REGISTRY hasRegistration`
    1. return `RECEIPT` if `RECEIPT fromAgent` == `AGENT`

</div>
