PREFIX interop: <http://www.w3.org/ns/solid/interop#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

# Agent
<#AgentShape> {
  a [ interop:Agent ] ;
  interop:hasRegistrySet IRI ;
  interop:hasAuthorizationAgent IRI ;
  interop:hasInbox IRI ;
  interop:hasAccessInbox IRI
}

# Registry Set
<#RegistrySetShape> {
  a [ interop:RegistrySet ] ;
  interop:hasAgentRegistry IRI ;
  interop:hasAccessGrantRegistry IRI ;
  interop:hasAccessReceiptRegistry IRI ;
  interop:hasDataRegistry IRI*
}

# Agent Registry
<#AgentRegistryShape> {
  a [ interop:AgentRegistry ] ;
  interop:hasRegistration IRI*
}

# Social Agent Registration
<#SocialAgentRegistrationShape> {
  a [ interop:SocialAgentRegistration ] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI ;
  interop:registeredAt xsd:dateTime ;
  interop:updatedAt xsd:dateTime ;
  interop:registeredAgent IRI ;
}

# Application Registration
<#ApplicationRegistrationShape> {
  a [ interop:ApplicationRegistration ] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI ;
  interop:registeredAt xsd:dateTime ;
  interop:updatedAt xsd:dateTime ;
  interop:registeredAgent IRI ;
}

# Data Registry
<#DataRegistryShape> {
  a [ interop:DataRegistry ] ;
  interop:hasRegistration IRI*
}

# Data Registration
<#DataRegistrationShape> {
  a [ interop:DataRegistration ] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI ;
  interop:registeredAt xsd:dateTime ;
  interop:updatedAt xsd:dateTime ;
  interop:registeredShapeTree IRI ;
  interop:registeredType IRI*
}

# Application
<#ApplicationShape> {
  a [ interop:Application ] ;
  interop:applicationName xsd:string ;
  interop:applicationDescription xsd:string ;
  interop:applicationAuthor IRI ;
  interop:applicationThumbnail IRI? ;
  interop:hasAccessNeedGroup IRI* ;
}

# Access Need Group
<#AccessNeedGroupShape> {
  a [ interop:AccessNeedGroup ] ;
  interop:hasAccessDecoratorIndex IRI
  interop:hasAccessNeedGroupDecorator IRI? ;
  interop:accessNecessity [ interop:AccessRequired interop:AccessOptional ] ;
  interop:accessScenario [ interop:PersonalAccess interop:SharedAccess ]+ ;
  interop:authenticatesAs [ interop:Agent interop:Pilot ] ;
  ( interop:hasAccessNeed IRI+ | interop:hasTrustedNeed IRI+ )
}

# Access Need
<#AccessNeedShape> {
  a [ interop:AccessNeed ] ;
  interop:inAccessNeedGroup @<#:AccessNeedGroupShape> ;
  interop:registeredShapeTree IRI ;
  interop:hasShapeTreeDecorator IRI ;
  interop:hasAccessNeedDecorator IRI? ;
  interop:hasDataInstance IRI* ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:creatorAccessMode @<#:AccessModes>* ;
  interop:accessNecessity [ interop:AccessRequired interop:AccessOptional ] ;
  interop:supportedBy IRI* ;  # ?
  interop:supports IRI? ;      # ?
  interop:hasAccessNeed @<#:InheritedAccessNeedShape>* ;
  interop:hasDataGrant @<#:DataGrantShape>?
}

# Inherited Access Need
<#InheritedAccessNeedShape> {
  a [ interop:AccessNeed ] ;
  interop:inAccessNeedGroup @<#:AccessNeedGroupShape> ;
  interop:registeredShapeTree IRI ;
  interop:hasShapeTreeDecorator IRI ;
  interop:hasAccessNeedDecorator IRI? ;
  interop:hasDataInstance IRI* ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:creatorAccessMode @<#:AccessModes>* ;
  interop:accessNecessity [ interop:AccessRequired interop:AccessOptional ] ;
  interop:supportedBy IRI* ;  # ?
  interop:supports IRI? ;     # ?
  interop:inheritsFromNeed @<#:AccessNeedShape> ;
  interop:hasDataGrant @<#:InheritedDataGrantShape>?
}

# Trusted Need
<#TrustedNeedShape> {
  a [ interop:TrustedNeed ] ;
  interop:inAccessNeedGroup IRI+ ;
  interop:hasAccessNeedDecorator IRI? ;
  interop:trustedWith IRI* ;
  interop:trustedWithType @<#:TrustedWithNeedTypes> ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:accessNecessity [ interop:AccessRequired interop:AccessOptional ] ;
  interop:hasTrustedGrant @<#:TrustedGrantShape>?
}

<#TrustedWithNeedTypes> [
  interop:Agent
  interop:AgentRegistry
  interop:DataRegistry
  interop:AccessGrantRegistry
  interop:AccessReceiptRegistry
]

# Access Modes
<#AccessModes> [
  acl:Read
  acl:Write
  acl:Append
  acl:Control
]

# Access Decorator Index
<#AccessDecoratorIndexShape> {
  a [ interop:AccessDecoratorIndex ] ;
  interop:defaultLanguage xsd:language ;
  interop:hasSeries @AccessDecoratorSeries+ ;
}

# Access Decorator Series
<#AccessDecoratorSeriesShape> {
  a [ interop:AccessDecoratorSeries ] ;
  interop:usesLanguage xsd:language ;
  interop:hasVersion @AccessDecoratorVersion+ ;
}

# Access Decorator Version
<#AccessDecoratorVersionShape> {
  a [ interop:AccessDecoratorVersion ] ;
  interop:isVersion xsd:string ;
  interop:hasSHA256 xsd:string ;
  interop:hasAccessDecoratorResource IRI ;
}

# Access Need Group Decorator
<#AccessNeedGroupDecoratorShape> {
  a [ interop:AccessNeedGroupDecorator ] ;
  interop:hasAccessNeedGroup IRI ;
  skos:prefLabel xsd:string ;
  skos:definition xsd:string
}

# Access Need Decorator
<#AccessNeedDecoratorShape> {
  a [ interop:AccessNeedDecorator ] ;
  interop:hasAccessNeedGroup IRI ;
  interop:registeredShapeTree IRI ;
  skos:prefLabel xsd:string
}

# Access Request
<#AccessRequestShape> {
  a [interop:AccessRequest] ;
  interop:fromAgent IRI ;             # Agent who sent the receipt
  interop:toAgent IRI ;               # Recipient of the receipt
  interop:hasAccessNeedGroup @<#:AccessNeedGroupShape>+
}

# Access Grant Registry
<#AccessGrantRegistryShape> {
  a [ interop:AccessGrantRegistry ] ;
  interop:hasRegistration IRI*
}

# Access Grant
<#AccessGrantShape> {
  a [ interop:AccessGrant ] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI? ;
  interop:registeredAt xsd:dateTime ;
  interop:updatedAt xsd:dateTime ;
  interop:hasAccessGrantSubject @<#:AccessGrantSubject> ;
  interop:hasAccessNeedGroup @<#:AccessNeedGroupShape>+ ;
  ( interop:hasDataGrant @<#:DataGrantShape>+ |
  interop:hasTrustedGrant @<#:TrustedGrantShape>+ )
}

# Access Grant Subject
<#AccessGrantSubjectShape> {
  a [ interop:AccessGrantSubject ] ;
  interop:accessGrantSubjectAgent IRI? ;
  interop:accessGrantSubjectApplication IRI?
}

# Access Invitation
<#AccessInvitationShape> {
  a [ interop:AccessInvitation ] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI? ;
  interop:registeredAt xsd:dateTime ;
  interop:updatedAt xsd:dateTime ;
  interop:expiresAt xsd:dateTime? ;
  interop:hasAccessNeedGroup @<#:AccessNeedGroupShape>+ ;
  ( interop:hasDataGrant @<#:DataGrantShape>+ |
  interop:hasTrustedGrant @<#:TrustedGrantShape>+ ) ;
  interop:hasAccessInvitationChannel @<#:AccessInvitationChannelShape>+
}

# Access Invitation Channel
<#AccessInvitationChannelShape> {
   a @<#ChannelTypes> ;
   interop:channelTarget xsd:string ;
   interop:channelCode xsd:string ;
   interop:isValidated xsd:boolean ;
   interop:remainingAttempts xsd:integer
}

# Access Invitation Channel Types
<#ChannelTypes> [
  :PhoneInvitationChannel   # Telephone
  :EmailInvitationChannel   # E-mail
  :SMSInvitationChannel     # SMS (Simple Messaging Service)
  :OfflineInvitationChannel # Other communication, e.g. verbal, shared note
  :LDNInvitationChannel     # Linked Data Notification
]

# Data Grant
<#DataGrantShape> {
  a [ interop:DataGrant ] ;
  interop:dataOwner IRI ;
  interop:registeredShapeTree IRI ;
  interop:hasDataRegistration IRI ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:creatorAccessMode @<#:AccessModes>* ;
  interop:scopeOfGrant @<#:DataGrantScopes> ;
  interop:hasDataInstance IRI* ;
}

# Inherited Data Grant
<#DataGrantShape> {
  a [ interop:DataGrant ] ;
  interop:dataOwner IRI ;
  interop:registeredShapeTree IRI ;
  interop:hasDataRegistration IRI ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:creatorAccessMode @<#:AccessModes>* ;
  interop:scopeOfGrant @<#:DataGrantScopes> ;
  interop:hasDataInstance IRI* ;
  interop:inheritsFromGrant IRI
}

# Data Grant Scopes
<#DataGrantScopes> [
  interop:SelectedInstances
  interop:AllInstances
  interop:InheritInstances
  interop:NoAccess
]

# Trusted Grant
<#TrustedGrantShape> {
  a [ interop:TrustedGrant ] ;
  # AccessGrant the TrustedGrant belongs to
  interop:hasAccessGrant @<#:AccessGrantShape> ;
  # TrustedNeed that the TrustedGrant satisfies
  interop:satisfiesTrustedNeed @<#:TrustedNeedShape>+ ;
  # Trusted resource of `trustedWithType` that access is related to
  interop:trustedWith IRI ;
  # Type of trusted resource
  interop:trustedWithType @<#:TrustedWithTypes> ;
  # Access Modes that have been granted to `trustedWith` Trusted Resource
  interop:accessMode @<#:AccessModes>+ ;
  # Scope of access for the trusted grant
  interop:scopeOfGrant @<#:TrustedGrantScopes>+
}

# Trusted Grant Target Types
<#TrustedWithGrantTypes> [
  interop:Agent
  interop:RegistrySet
  interop:AgentRegistry
  interop:DataRegistry
  interop:AccessGrantRegistry
  interop:AccessReceiptRegistry
]

# Trusted Grant Scopes
<#TrustedGrantScopes> [
  interop:NoAccess
  interop:TrustedAccess
]

# Access Receipt Registry
<#AccessReceiptRegistryShape> {
  a [ interop:AccessReceiptRegistry ] ;
  interop:hasRegistration IRI*
}

# Access Receipt
<#AccessReceiptShape> {
  a [interop:AccessReceipt] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI? ;
  interop:registeredAt xsd:dateTime ;
  interop:updatedAt xsd:dateTime ;
  interop:providedAt xsd:dateTime ;
  interop:fromAgent IRI ;             # Agent who sent the receipt
  interop:viaAgent IRI ;             # Trusted agent on behalf of fromAgent
  interop:hasAccessGrantSubject @<#:AccessGrantSubject> ;  # Subject / recipient
  interop:hasAccessNeedGroup @<#:AccessNeedGroupShape>+ ;
  ( interop:hasDataGrant @<#:DataGrantShape>+ |
  interop:hasTrustedGrant @<#:TrustedGrantShape>+ ) ;
}
